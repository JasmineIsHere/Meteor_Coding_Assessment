// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Member is an object representing the database table.
type Member struct {
	ID             uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Gender         string    `boil:"gender" json:"gender" toml:"gender" yaml:"gender"`
	MaritalStatus  string    `boil:"marital_status" json:"marital_status" toml:"marital_status" yaml:"marital_status"`
	SpouseID       null.Uint `boil:"spouse_id" json:"spouse_id,omitempty" toml:"spouse_id" yaml:"spouse_id,omitempty"`
	OccupationType string    `boil:"occupation_type" json:"occupation_type" toml:"occupation_type" yaml:"occupation_type"`
	AnnualIncome   float64   `boil:"annual_income" json:"annual_income" toml:"annual_income" yaml:"annual_income"`
	Dob            time.Time `boil:"dob" json:"dob" toml:"dob" yaml:"dob"`
	HouseholdID    uint      `boil:"household_id" json:"household_id" toml:"household_id" yaml:"household_id"`

	R *memberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L memberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MemberColumns = struct {
	ID             string
	Name           string
	Gender         string
	MaritalStatus  string
	SpouseID       string
	OccupationType string
	AnnualIncome   string
	Dob            string
	HouseholdID    string
}{
	ID:             "id",
	Name:           "name",
	Gender:         "gender",
	MaritalStatus:  "marital_status",
	SpouseID:       "spouse_id",
	OccupationType: "occupation_type",
	AnnualIncome:   "annual_income",
	Dob:            "dob",
	HouseholdID:    "household_id",
}

var MemberTableColumns = struct {
	ID             string
	Name           string
	Gender         string
	MaritalStatus  string
	SpouseID       string
	OccupationType string
	AnnualIncome   string
	Dob            string
	HouseholdID    string
}{
	ID:             "member.id",
	Name:           "member.name",
	Gender:         "member.gender",
	MaritalStatus:  "member.marital_status",
	SpouseID:       "member.spouse_id",
	OccupationType: "member.occupation_type",
	AnnualIncome:   "member.annual_income",
	Dob:            "member.dob",
	HouseholdID:    "member.household_id",
}

// Generated where

type whereHelpernull_Uint struct{ field string }

func (w whereHelpernull_Uint) EQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint) NEQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint) LT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint) LTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint) GT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint) GTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Uint) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MemberWhere = struct {
	ID             whereHelperuint
	Name           whereHelperstring
	Gender         whereHelperstring
	MaritalStatus  whereHelperstring
	SpouseID       whereHelpernull_Uint
	OccupationType whereHelperstring
	AnnualIncome   whereHelperfloat64
	Dob            whereHelpertime_Time
	HouseholdID    whereHelperuint
}{
	ID:             whereHelperuint{field: "`member`.`id`"},
	Name:           whereHelperstring{field: "`member`.`name`"},
	Gender:         whereHelperstring{field: "`member`.`gender`"},
	MaritalStatus:  whereHelperstring{field: "`member`.`marital_status`"},
	SpouseID:       whereHelpernull_Uint{field: "`member`.`spouse_id`"},
	OccupationType: whereHelperstring{field: "`member`.`occupation_type`"},
	AnnualIncome:   whereHelperfloat64{field: "`member`.`annual_income`"},
	Dob:            whereHelpertime_Time{field: "`member`.`dob`"},
	HouseholdID:    whereHelperuint{field: "`member`.`household_id`"},
}

// MemberRels is where relationship names are stored.
var MemberRels = struct {
	Household     string
	Spouse        string
	SpouseMembers string
}{
	Household:     "Household",
	Spouse:        "Spouse",
	SpouseMembers: "SpouseMembers",
}

// memberR is where relationships are stored.
type memberR struct {
	Household     *Household  `boil:"Household" json:"Household" toml:"Household" yaml:"Household"`
	Spouse        *Member     `boil:"Spouse" json:"Spouse" toml:"Spouse" yaml:"Spouse"`
	SpouseMembers MemberSlice `boil:"SpouseMembers" json:"SpouseMembers" toml:"SpouseMembers" yaml:"SpouseMembers"`
}

// NewStruct creates a new relationship struct
func (*memberR) NewStruct() *memberR {
	return &memberR{}
}

func (r *memberR) GetHousehold() *Household {
	if r == nil {
		return nil
	}
	return r.Household
}

func (r *memberR) GetSpouse() *Member {
	if r == nil {
		return nil
	}
	return r.Spouse
}

func (r *memberR) GetSpouseMembers() MemberSlice {
	if r == nil {
		return nil
	}
	return r.SpouseMembers
}

// memberL is where Load methods for each relationship are stored.
type memberL struct{}

var (
	memberAllColumns            = []string{"id", "name", "gender", "marital_status", "spouse_id", "occupation_type", "annual_income", "dob", "household_id"}
	memberColumnsWithoutDefault = []string{"name", "gender", "marital_status", "spouse_id", "occupation_type", "annual_income", "dob", "household_id"}
	memberColumnsWithDefault    = []string{"id"}
	memberPrimaryKeyColumns     = []string{"id"}
	memberGeneratedColumns      = []string{}
)

type (
	// MemberSlice is an alias for a slice of pointers to Member.
	// This should almost always be used instead of []Member.
	MemberSlice []*Member

	memberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	memberType                 = reflect.TypeOf(&Member{})
	memberMapping              = queries.MakeStructMapping(memberType)
	memberPrimaryKeyMapping, _ = queries.BindMapping(memberType, memberMapping, memberPrimaryKeyColumns)
	memberInsertCacheMut       sync.RWMutex
	memberInsertCache          = make(map[string]insertCache)
	memberUpdateCacheMut       sync.RWMutex
	memberUpdateCache          = make(map[string]updateCache)
	memberUpsertCacheMut       sync.RWMutex
	memberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single member record from the query.
func (q memberQuery) One(exec boil.Executor) (*Member, error) {
	o := &Member{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for member")
	}

	return o, nil
}

// All returns all Member records from the query.
func (q memberQuery) All(exec boil.Executor) (MemberSlice, error) {
	var o []*Member

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Member slice")
	}

	return o, nil
}

// Count returns the count of all Member records in the query.
func (q memberQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count member rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q memberQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if member exists")
	}

	return count > 0, nil
}

// Household pointed to by the foreign key.
func (o *Member) Household(mods ...qm.QueryMod) householdQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.HouseholdID),
	}

	queryMods = append(queryMods, mods...)

	return Households(queryMods...)
}

// Spouse pointed to by the foreign key.
func (o *Member) Spouse(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SpouseID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// SpouseMembers retrieves all the member's Members with an executor via spouse_id column.
func (o *Member) SpouseMembers(mods ...qm.QueryMod) memberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`member`.`spouse_id`=?", o.ID),
	)

	return Members(queryMods...)
}

// LoadHousehold allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberL) LoadHousehold(e boil.Executor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		object = maybeMember.(*Member)
	} else {
		slice = *maybeMember.(*[]*Member)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args = append(args, object.HouseholdID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if a == obj.HouseholdID {
					continue Outer
				}
			}

			args = append(args, obj.HouseholdID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`household`),
		qm.WhereIn(`household.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Household")
	}

	var resultSlice []*Household
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Household")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for household")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for household")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Household = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HouseholdID == foreign.ID {
				local.R.Household = foreign
				break
			}
		}
	}

	return nil
}

// LoadSpouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (memberL) LoadSpouse(e boil.Executor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		object = maybeMember.(*Member)
	} else {
		slice = *maybeMember.(*[]*Member)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		if !queries.IsNil(object.SpouseID) {
			args = append(args, object.SpouseID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SpouseID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SpouseID) {
				args = append(args, obj.SpouseID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Spouse = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SpouseID, foreign.ID) {
				local.R.Spouse = foreign
				break
			}
		}
	}

	return nil
}

// LoadSpouseMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (memberL) LoadSpouseMembers(e boil.Executor, singular bool, maybeMember interface{}, mods queries.Applicator) error {
	var slice []*Member
	var object *Member

	if singular {
		object = maybeMember.(*Member)
	} else {
		slice = *maybeMember.(*[]*Member)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &memberR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &memberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`member`),
		qm.WhereIn(`member.spouse_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for member")
	}

	if singular {
		object.R.SpouseMembers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SpouseID) {
				local.R.SpouseMembers = append(local.R.SpouseMembers, foreign)
				break
			}
		}
	}

	return nil
}

// SetHousehold of the member to the related item.
// Sets o.R.Household to related.
func (o *Member) SetHousehold(exec boil.Executor, insert bool, related *Household) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `member` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"household_id"}),
		strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HouseholdID = related.ID
	if o.R == nil {
		o.R = &memberR{
			Household: related,
		}
	} else {
		o.R.Household = related
	}

	return nil
}

// SetSpouse of the member to the related item.
// Sets o.R.Spouse to related.
func (o *Member) SetSpouse(exec boil.Executor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `member` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"spouse_id"}),
		strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SpouseID, related.ID)
	if o.R == nil {
		o.R = &memberR{
			Spouse: related,
		}
	} else {
		o.R.Spouse = related
	}

	return nil
}

// RemoveSpouse relationship.
// Sets o.R.Spouse to nil.
func (o *Member) RemoveSpouse(exec boil.Executor, related *Member) error {
	var err error

	queries.SetScanner(&o.SpouseID, nil)
	if _, err = o.Update(exec, boil.Whitelist("spouse_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Spouse = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddSpouseMembers adds the given related objects to the existing relationships
// of the member, optionally inserting them as new records.
// Appends related to o.R.SpouseMembers.
func (o *Member) AddSpouseMembers(exec boil.Executor, insert bool, related ...*Member) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SpouseID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `member` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"spouse_id"}),
				strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SpouseID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &memberR{
			SpouseMembers: related,
		}
	} else {
		o.R.SpouseMembers = append(o.R.SpouseMembers, related...)
	}

	return nil
}

// SetSpouseMembers removes all previously related items of the
// member replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Spouse's SpouseMembers accordingly.
// Replaces o.R.SpouseMembers with related.
func (o *Member) SetSpouseMembers(exec boil.Executor, insert bool, related ...*Member) error {
	query := "update `member` set `spouse_id` = null where `spouse_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.SpouseMembers = nil
	}

	return o.AddSpouseMembers(exec, insert, related...)
}

// RemoveSpouseMembers relationships from objects passed in.
// Removes related items from R.SpouseMembers (uses pointer comparison, removal does not keep order)
func (o *Member) RemoveSpouseMembers(exec boil.Executor, related ...*Member) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SpouseID, nil)
		if _, err = rel.Update(exec, boil.Whitelist("spouse_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SpouseMembers {
			if rel != ri {
				continue
			}

			ln := len(o.R.SpouseMembers)
			if ln > 1 && i < ln-1 {
				o.R.SpouseMembers[i] = o.R.SpouseMembers[ln-1]
			}
			o.R.SpouseMembers = o.R.SpouseMembers[:ln-1]
			break
		}
	}

	return nil
}

// Members retrieves all the records using an executor.
func Members(mods ...qm.QueryMod) memberQuery {
	mods = append(mods, qm.From("`member`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`member`.*"})
	}

	return memberQuery{q}
}

// FindMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMember(exec boil.Executor, iD uint, selectCols ...string) (*Member, error) {
	memberObj := &Member{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `member` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, memberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from member")
	}

	return memberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Member) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	memberInsertCacheMut.RLock()
	cache, cached := memberInsertCache[key]
	memberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(memberType, memberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `member` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `member` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `member` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into member")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member")
	}

CacheNoHooks:
	if !cached {
		memberInsertCacheMut.Lock()
		memberInsertCache[key] = cache
		memberInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Member.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Member) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	memberUpdateCacheMut.RLock()
	cache, cached := memberUpdateCache[key]
	memberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update member, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `member` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, memberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, append(wl, memberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update member row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for member")
	}

	if !cached {
		memberUpdateCacheMut.Lock()
		memberUpdateCache[key] = cache
		memberUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q memberQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for member")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MemberSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `member` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all member")
	}
	return rowsAff, nil
}

var mySQLMemberUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Member) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no member provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(memberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMemberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	memberUpsertCacheMut.RLock()
	cache, cached := memberUpsertCache[key]
	memberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			memberAllColumns,
			memberColumnsWithDefault,
			memberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			memberAllColumns,
			memberPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert member, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`member`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `member` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(memberType, memberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(memberType, memberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for member")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == memberMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(memberType, memberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for member")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for member")
	}

CacheNoHooks:
	if !cached {
		memberUpsertCacheMut.Lock()
		memberUpsertCache[key] = cache
		memberUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Member record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Member) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Member provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), memberPrimaryKeyMapping)
	sql := "DELETE FROM `member` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for member")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q memberQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no memberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MemberSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `member` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from member slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for member")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Member) Reload(exec boil.Executor) error {
	ret, err := FindMember(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MemberSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), memberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `member`.* FROM `member` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, memberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MemberSlice")
	}

	*o = slice

	return nil
}

// MemberExists checks if the Member row exists.
func MemberExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `member` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if member exists")
	}

	return exists, nil
}
