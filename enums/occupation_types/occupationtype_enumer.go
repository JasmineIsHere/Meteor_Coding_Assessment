// Code generated by "enumer -type=OccupationType -json"; DO NOT EDIT

package occupation_types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OccupationTypeName = "UnemployedStudentEmployed"

var _OccupationTypeIndex = [...]uint8{0, 10, 17, 25}

func (i OccupationType) String() string {
	i -= 1
	if i < 0 || i >= OccupationType(len(_OccupationTypeIndex)-1) {
		return fmt.Sprintf("OccupationType(%d)", i+1)
	}
	return _OccupationTypeName[_OccupationTypeIndex[i]:_OccupationTypeIndex[i+1]]
}

var _OccupationTypeValues = []OccupationType{1, 2, 3}

var _OccupationTypeNameToValueMap = map[string]OccupationType{
	strings.ToLower(_OccupationTypeName[0:10]):  1,
	strings.ToLower(_OccupationTypeName[10:17]): 2,
	strings.ToLower(_OccupationTypeName[17:25]): 3,
}

// Parse retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func Parse(s string) (OccupationType, error) {
	if val, ok := _OccupationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OccupationType values", s)
}

// OccupationTypeValues returns all values of the enum
func OccupationTypeValues() []OccupationType {
	return _OccupationTypeValues
}

// IsAOccupationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OccupationType) IsAOccupationType() bool {
	for _, v := range _OccupationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OccupationType
func (i OccupationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OccupationType
func (i *OccupationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OccupationType should be a string, got %s", data)
	}

	var err error
	*i, err = Parse(s)
	return err
}
