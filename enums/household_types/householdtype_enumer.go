// Code generated by "enumer -type=HouseholdType -json"; DO NOT EDIT

package household_types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HouseholdTypeName = "LandedCondominiumHDB"

var _HouseholdTypeIndex = [...]uint8{0, 6, 17, 20}

func (i HouseholdType) String() string {
	i -= 1
	if i < 0 || i >= HouseholdType(len(_HouseholdTypeIndex)-1) {
		return fmt.Sprintf("HouseholdType(%d)", i+1)
	}
	return _HouseholdTypeName[_HouseholdTypeIndex[i]:_HouseholdTypeIndex[i+1]]
}

var _HouseholdTypeValues = []HouseholdType{1, 2, 3}

var _HouseholdTypeNameToValueMap = map[string]HouseholdType{
	strings.ToLower(_HouseholdTypeName[0:6]):   1,
	strings.ToLower(_HouseholdTypeName[6:17]):  2,
	strings.ToLower(_HouseholdTypeName[17:20]): 3,
}

// Parse retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func Parse(s string) (HouseholdType, error) {
	if val, ok := _HouseholdTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HouseholdType values", s)
}

// HouseholdTypeValues returns all values of the enum
func HouseholdTypeValues() []HouseholdType {
	return _HouseholdTypeValues
}

// IsAHouseholdType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HouseholdType) IsAHouseholdType() bool {
	for _, v := range _HouseholdTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HouseholdType
func (i HouseholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HouseholdType
func (i *HouseholdType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HouseholdType should be a string, got %s", data)
	}

	var err error
	*i, err = Parse(s)
	return err
}
